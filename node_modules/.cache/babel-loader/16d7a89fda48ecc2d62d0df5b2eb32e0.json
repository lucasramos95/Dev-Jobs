{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev Projetos\\\\dev-jobs\\\\src\\\\Results.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport ItemResult from './ItemResult';\nimport Search from './Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Results = () => {\n  _s();\n\n  const [jobs, setJobs] = useState(null);\n  const [data, setData] = useState(null);\n  const [filters, setFilters] = useState([]);\n  useEffect(() => {\n    fetch('data.json', {\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      }\n    }).then(response => response.json()).then(data => {\n      setJobs(data);\n      setData(data);\n    }).catch(err => console.log(err));\n  }, []);\n\n  const addedFilters = filterValue => {\n    const filtersArray = [...filters];\n\n    if (filtersArray.indexOf(filterValue) === -1) {\n      filtersArray.push(filterValue);\n    }\n\n    setFilters(filtersArray);\n    const jobsArray = [...jobs];\n    const newResults = jobsArray.filter(job => {\n      if (job.level === filterValue) {\n        return job.level === filterValue;\n      }\n\n      if (job.role === filterValue) {\n        return job.role === filterValue;\n      }\n\n      if (job.languages.includes(filterValue)) {\n        return job.languages.includes(filterValue);\n      }\n\n      if (job.tools.includes(filterValue)) {\n        return job.tools.includes(filterValue);\n      }\n    });\n    setJobs(newResults);\n  };\n\n  const removeOneFilter = filterValue => {\n    const filtersArray = [...filters];\n    const newArray = filtersArray.filter(item => item !== filterValue);\n    setFilters(newArray);\n    const originalArray = [...data];\n    setJobs(originalArray);\n    sortResults(newArray, originalArray);\n  };\n\n  const sortResults = (filtersArray, jobsArray) => {\n    const newJobs = [];\n\n    for (let i = 0; i < jobsArray.length; i++) {\n      const job = jobsArray[i];\n      var isFiltered = filterJob(job, filtersArray);\n\n      if (isFiltered) {\n        newJobs.push(job);\n      }\n    }\n\n    setJobs(newJobs);\n  };\n\n  const filterJob = (job, filters) => {\n    let filterHits = 0;\n\n    for (let i = 0; i < filters.length; i++) {\n      const filter = filters[i];\n      filterHits += searchJobs(job, filter);\n    }\n\n    if (filterHits === filters.length) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const searchJobs = (job, filter) => {\n    var hits = 0;\n\n    for (const key in job) {\n      let value = job[key];\n\n      if (Array.isArray(value)) {\n        for (const item of value) {\n          if (item === filter) {\n            hits += 1;\n          }\n        }\n      } else {\n        if (value === filter) {\n          hits += 1;\n        }\n      }\n    }\n\n    return hits;\n  };\n\n  const clearAllFilters = () => {\n    setJobs(data);\n    setFilters([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results\",\n    children: [filters.length > 0 && /*#__PURE__*/_jsxDEV(Search, {\n      filters: filters,\n      removeOneFilter: removeOneFilter,\n      clearAllFilters: clearAllFilters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 20\n    }, this), jobs && /*#__PURE__*/_jsxDEV(ItemResult, {\n      data: jobs,\n      addedFilters: addedFilters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Results, \"n7x9DHjF0nOVPYwxbrmTiyFsDk0=\");\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"names":["useState","useEffect","ItemResult","Search","Results","jobs","setJobs","data","setData","filters","setFilters","fetch","headers","then","response","json","catch","err","console","log","addedFilters","filterValue","filtersArray","indexOf","push","jobsArray","newResults","filter","job","level","role","languages","includes","tools","removeOneFilter","newArray","item","originalArray","sortResults","newJobs","i","length","isFiltered","filterJob","filterHits","searchJobs","hits","key","value","Array","isArray","clearAllFilters"],"sources":["C:/Dev Projetos/dev-jobs/src/Results.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport ItemResult from './ItemResult';\r\nimport Search from './Search';\r\n\r\nconst Results = () => {\r\n    const [jobs, setJobs] = useState(null);\r\n    const [data, setData] = useState(null);\r\n    const [filters, setFilters] = useState([]);\r\n    \r\n\r\n    useEffect(() => {\r\n        fetch('data.json', {\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                \"Accept\": \"application/json\"\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            setJobs(data)\r\n            setData(data)\r\n        })\r\n        .catch(err => console.log(err));\r\n    }, [])\r\n\r\n    const addedFilters = (filterValue) => { \r\n        const filtersArray = [...filters];\r\n        if (filtersArray.indexOf(filterValue) === -1) {\r\n            filtersArray.push(filterValue);\r\n        }\r\n        setFilters(filtersArray);\r\n\r\n        const jobsArray = [...jobs];\r\n        const newResults = jobsArray.filter(job => {\r\n            if (job.level === filterValue) {\r\n                return job.level === filterValue\r\n            }\r\n            if (job.role === filterValue) {\r\n                return job.role === filterValue\r\n            }\r\n            if (job.languages.includes(filterValue)) {\r\n                return job.languages.includes(filterValue)\r\n            }\r\n            if (job.tools.includes(filterValue)) {\r\n                return job.tools.includes(filterValue)\r\n            }\r\n        })\r\n       setJobs(newResults)\r\n    }\r\n\r\n    const removeOneFilter = (filterValue) => {\r\n        const filtersArray = [...filters];\r\n        const newArray = filtersArray.filter(item => item !== filterValue)\r\n        setFilters(newArray);\r\n\r\n        const originalArray = [...data];\r\n        setJobs(originalArray);\r\n        sortResults(newArray, originalArray);\r\n    }\r\n\r\n    const sortResults = (filtersArray, jobsArray) => {\r\n        const newJobs = [];\r\n        for (let i = 0; i < jobsArray.length; i++) {\r\n            const job = jobsArray[i];\r\n            var isFiltered = filterJob(job, filtersArray)\r\n            if (isFiltered) {\r\n                newJobs.push(job)\r\n            }\r\n        }\r\n        setJobs(newJobs);\r\n    }\r\n\r\n    const filterJob = (job, filters) => {\r\n        let filterHits = 0;\r\n        for (let i = 0; i < filters.length; i++) {\r\n            const filter = filters[i];\r\n            filterHits += searchJobs(job, filter);\r\n        }\r\n        if (filterHits === filters.length) {\r\n            return true\r\n        }\r\n        else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    const searchJobs = (job, filter) => {\r\n        var hits = 0;\r\n        for (const key in job) {\r\n            let value = job[key];\r\n            if (Array.isArray(value)) {\r\n                for (const item of value) {\r\n                    if (item === filter) {\r\n                        hits += 1\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (value === filter) {\r\n                    hits += 1\r\n                }\r\n            }\r\n        }\r\n        return hits;\r\n    }\r\n\r\n    const clearAllFilters = () => {\r\n        setJobs(data);\r\n        setFilters([]);\r\n    }\r\n\r\n    return ( \r\n        <div className=\"results\">\r\n            { (filters.length > 0) \r\n                && <Search \r\n                filters={ filters } \r\n                removeOneFilter={ removeOneFilter }\r\n                clearAllFilters={ clearAllFilters }/> }\r\n            { jobs && \r\n                <ItemResult \r\n                data={ jobs } \r\n                addedFilters={ addedFilters }/> }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Results;"],"mappings":"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"},"metadata":{},"sourceType":"module"}